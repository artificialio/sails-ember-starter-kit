#!/usr/bin/env node

// Provide a title to the process in `ps`
process.title = 'sane';

var program = require('commander');
var Yam = require('yam');
require('shelljs/global');

//transforms all following require's to parse ES6/7 code
require('traceur').require.makeDefault(function(filename) {
  // don't transpile our dependencies, just our app
  return filename.indexOf('node_modules') === -1;
}, {asyncFunctions: true});


var projectMeta = require('../lib/projectMeta');
var commands = require('../lib/commands');

//load config/default parameters from .sane-cli file in current and home directory
var config = new Yam('sane-cli').getAll();

program
  .version(projectMeta.version())
  .usage('<command>');

//TODO: help command - should work as an alias to --help but also sho help for subcommands
// program
//   .command('help [command]')
//   .alias('h')
//   .description('Shows the help, optionally for a single command')
//   .action(function(command){ commands.help(command) });

//new command
program
  .command('new <name>')
  .alias('n')
  .description('Creates a new sane project. Choose database via -db disk(default)|mongo|mysql|postgres')
  .option('-d, --database [type]', 'Options: disk (default), mongo, mysql, postgres', config.database || 'disk')
  .option('-c, --docker [boolean]', 'Setup Sails server and dependencies within docker containers.', config.docker || false)
  .option('-v, --verbose [boolean]', 'Show more detailed command output.', config.verbose || false)
  .action(function(name, options) { commands.new(name, options) });

// TODO: up command - need to look into, how to unify logs.
// Other than that it is just a simple substitue for 'fig up && cd client && ember server --proxy http://192.168.59.103:1337'
program
  .command('up')
  .option('-d, --docker [boolean]', 'Run Sails server and dependencies within docker containers.', config.docker || false)
  // .option('-v, --verbose', 'Show more detailed command output.')
  .alias('serve')
  .description('Starts the Sails and Ember server with a unified log.')
  .action(function(options) { commands.up(options) });

//TODO: generate command - should simply call:
// fig run server sails generate model <name> [options...]
// fig run server sails generate controller <name>
// cd client && ember g resource <name> [options]
program
  .command('generate <blueprint> [name] [attributes...]')
  .option('-d, --docker [boolean]', 'Run Sails server and dependencies within docker containers.', config.docker || false)
  .alias('g')
  .description('Generates new code for client and server from blueprints')
  .action(function(blueprint, name, attributes){ commands.generate(blueprint, name, attributes) });

//TODO: sync command: Farily complex. Needs to check which models exist on the client-side, which on the server-side
// and then create all the one that don't exist on either side and the rest make sure they are the same.
// For all attributes that only exist on the sails side (e.g. email) a substitute has to be found
// Think if it makes sense to have some minimal settings (flags, or .sanerc file?) to ignore certain models/attrinutes
//   .command('sync [modelName]')
//   .alias('s')
//   .description('Syncs the client and server models.')
//   .action(function(modelName){ commands.sync(modelName); });

program.on('--help', function(){
  console.log('version: ' + projectMeta.version());
});

program.parse(process.argv);

if(!program.args.length || program.args[0] === 'help') {
  program.help();
}
